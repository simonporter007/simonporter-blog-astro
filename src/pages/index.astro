---
import { getCollection } from 'astro:content';

import Layout from '@/components/layout/Layout.astro';
import SocialLinks from '@/components/SocialLinks.astro';
import PostCard from '@/components/posts/PostCard.astro';
import Link from '@/components/ui/Link.astro';
import convertAsteriskToStrongTag from '@/utils/convertAsteriskToStrongTag';

const posts = (
  await getCollection('posts', ({ data }) => {
    return import.meta.env.PROD ? data.isDraft !== true : true;
  })
).sort(function (first, second) {
  return second.data.publishedAt.getTime() - first.data.publishedAt.getTime();
});
const { remarkPluginFrontmatter } = await posts?.[0]?.render();
const readingTime = Math.round(remarkPluginFrontmatter?.estReadingTime);
---

<Layout>
  <article class='py-10 md:py-20'>
    <div class='grid gap-8 m-auto max-w-fit'>
      <h1
        transition:name='title'
        class='text-5xl font-extrabold text-foreground max-w-[25ch] prose'
      >
        <Link
          href={`/posts/${posts?.[0]?.slug}`}
          label={posts?.[0]?.data?.title}
        />
      </h1>
      <div class='grid gap-2'>
        <h2
          class='w-auto max-w-[60ch] leading-6'
          set:html={convertAsteriskToStrongTag(posts?.[0]?.data?.description)}
        />
        <h3 class='text-xs text-muted-foreground uppercase'>
          {
            `${readingTime} min read â€¢ ${posts?.[0]?.data?.publishedAt
              .toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })
              .toLowerCase()}`
          }
        </h3>
      </div>
    </div>
  </article>
  <section class='grid gap-10 md:gap-20'>
    <article class='grid gap-8 pt-8 border-t border-solid border-foreground'>
      <header class='flex w-full flex-row justify-between gap-2'>
        <h3 class='text-lg text-foreground'>Latest posts</h3>
      </header>
      {posts.length === 0 && <p>Soon, stay connected ðŸ‘€...</p>}

      <section class='grid gap-4'>
        {
          posts.length !== 0 &&
            posts
              .slice(0, 10)
              .map((post) => (
                <PostCard
                  publishedAt={post.data.publishedAt}
                  title={post.data.title}
                  description={post.data.description}
                  slug={post.slug}
                  tags={post.data.tags}
                />
              ))
        }
      </section>
    </article>

    <!-- TODO: Implement tools later -->
    <!-- <article class="grid gap-8 pt-8 border-t border-solid border-foreground">
      <header class="flex w-full flex-row justify-between gap-2">
        <h3 class="text-lg text-foreground">
          Tools
        </h3>
      </header>
      {projects.length === 0 && <p>Coming soon...</p>}

      <section class="grid gap-4">
        {
          projects.length !== 0 &&
            projects.map((project) => <ProjectCard {...project} />)
        }
      </section>
    </article> -->

    <article class='grid gap-8 pt-8 border-t border-solid border-foreground'>
      <header class='flex w-full flex-row justify-between gap-2'>
        <h3 class='text-lg text-foreground'>Get in touch</h3>
      </header>
      <SocialLinks />
    </article>
  </section>
</Layout>
